import json
import os
import sys
import time

import requests


# iterate over the folder with the gt, get the name and add it to to colection name
# execute the method for each of this commands once
# save return json in list


def get_file_list(dir):
    list = []
    for _, _, fnames in sorted(os.walk(dir)):
        for fname in fnames:
            if fname == ".DS_Store":
                continue
            list.append(fname)
    list.sort()
    return list


def poll_result(result_link):
    """ Polls for the result of the execution in 1s intervals
    Arguments:
        result_link {string} -- [the resultLink generated by the POST request that started the execution]
    Returns:
        [json] -- [the result of the execution]
    """

    response = json.loads(requests.request("GET", result_link).text)
    while response['status'] != 'done':
        if response['status'] == 'error':
            sys.stderr.write(
                'Error in executing the request. See the log file at: ' + response['output'][0]['file']['url'])
            raise Exception()
        time.sleep(1)
        response = json.loads(requests.request("GET", result_link).text)

    return response


def save_file(url, output_folder):
    """Saves a file from a URL into a local folder
    Arguments:
        url {string} -- The URL from where to download the file
        output_folder {string} -- The path to the output directory
    """

    # get request
    response = requests.get(url)

    # get file extension and name
    file_name, file_extension = os.path.splitext(url.split("/")[-1])

    # open in binary mode
    with open(os.path.join(output_folder, file_name + file_extension), "wb") as file:
        # write to file
        file.write(response.content)


def execute(url, payload):
    headers = {'content-type': 'application/json'}

    answer = requests.request("POST", url, data=payload, headers=headers)

    json_data = json.loads(answer.text)
    if 'collections' in url:
        if 'errorType' not in json_data:
            return json_data['collection']
        else:
            sys.stderr.write('Error in executing the request. Collection already exists!')
            raise FileExistsError("Collection already exists!")

    result_link = json_data['results'][0]['resultLink']

    try:
        return poll_result(result_link)
    except:
        print("FAIL")

